.ONESHELL:

# Make on macOS is stuck at 3.81
ifeq ($(MAKE_VERSION),3.81)
	SHELL := /usr/bin/env bash -euo pipefail -c
else
	SHELL := /usr/bin/env
	.SHELLFLAGS = -euo pipefail -c
endif

MAKEFLAGS += --silent --jobs=8

QUIET_UNLESS_FAIL = $(if $(VERBOSE),$2,OUT="$$($2 2>&1)" || { CODE="$$?"; printf "$1 failed:\n%s" "$$OUT"; exit $$CODE; }; echo "$1: OK")

default: test
.PHONY: default

# -----
# Section: Go General
# This section should be useful for all go projects.
# -----
ALL_PACKAGES := ./...

PKG ?= $(ALL_PACKAGES)

QUIET    ?= $(if $(VERBOSE),,true)
GO_FLAGS ?= -count=1 -race$(if $(VERBOSE), -v)$(if $(RUN), -run $(RUN))
GOBUILD   = go build $(GO_FLAGS)
GOTEST    = go test$(if $(1), $(1)) $(GO_FLAGS) $(PKG)
TIMEOUT  ?= $(if $(TIMEOUT_SECONDS),$(TIMEOUT_SECONDS)s)
TIMEOUT_FLAG  = $(if $(TIMEOUT),-timeout $(TIMEOUT))
GOTESTTIMEOUT = $(call GOTEST,$(TIMEOUT_FLAG))

check/compile:
	$(call QUIET_UNLESS_FAIL,Compilation, go build -o /dev/null $(ALL_PACKAGES))
	$(call QUIET_UNLESS_FAIL,Test compilation, go test -exec true $(ALL_PACKAGES))
.PHONY: check/compile

testv: VERBOSE = true
testv: test
.PHONY: testv

test: check/compile
	@$(TEST_HEADER)
	$(call QUIET_UNLESS_FAIL,Running go tests, $(GOTESTTIMEOUT))
.PHONY: test

STATE_DIR = .state
TEST_TIMINGS_DIR = $(shell mkdir -p $(STATE_DIR)/test_timings && echo $(STATE_DIR)/test_timings)
TEST_TIME_FILENAME = $(shell sha256sum <<< "$(GOTEST)" | cut -c -64).txt
TEST_TIME_FILE = $(TEST_TIMINGS_DIR)/$(TEST_TIME_FILENAME)
TIME_TEST = /usr/bin/time -p -o $(TEST_TIME_FILE).provisional -- $(GOTESTTIMEOUT) 2>&1
LAST_TEST_TIME_CMD = [[ -e "$(TEST_TIME_FILE)" ]] && sed -nE 's/^real ([0-9]+)\..*/\1/p' < "$(TEST_TIME_FILE)"
LAST_TEST_TIME = $(shell $(LAST_TEST_TIME_CMD))
TIMEOUT_SECONDS ?= $(if $(LAST_TEST_TIME),$(shell echo $$(( ($(LAST_TEST_TIME) + 1) * 2 + 5))))

TIMEOUT_GO_TEST = $(TIME_TEST); CODE="$$?"; [[ "$$CODE" == 0 ]] && mv $(TEST_TIME_FILE).provisional $(TEST_TIME_FILE); bash -c "exit $$CODE"
TEST_LOG = .state/test.log

TEST_HEADER = printf "Running %s \#%d\n" "$(GOTESTTIMEOUT)" "$$((i++ + 1))"
TEST_FOOTER = printf "Ran %s \#%d\n" "$(GOTESTTIMEOUT)" "$$((i))"


# watch runs tests repeatedly with a timeout and a 2 second delay between runs,
# and uses an adaptive timout based on the last run time with the sam test parameters.
watch:
	@clear
	@mkdir -p .state && echo '*' > .state/.gitignore
	@$(TEST_HEADER)
	@while true; do \
		{ \
			$(TEST_HEADER); \
			$(TIMEOUT_GO_TEST) 2>&1; \
			$(TEST_FOOTER); \
		} > $(TEST_LOG); \
		clear; cat $(TEST_LOG); sleep 2; \
	done
.PHONY: watch

watchv: VERBOSE = true
watchv: watch
.PHONY: watchv

# -----
# Section: Go Executable.
# This section is useful for go projects creating an executable.
# -----
NAME := hc-gh

# BIN is the binary name.
BIN  := ./$(NAME)

# DESTDIR is the absolute path to the install path if running 'make install'
# Default to wherever it's currently installed using which, or /usr/local/bin
# if it's not yet installed.
DESTDIR ?= $(shell $$(dirname $$(which $(NAME)) 2>/dev/null || echo /usr/local/bin)

build: $(BIN)
	echo $<
.PHONY: build

$(BIN): test
	$(GOBUILD) -o "$@"
.PHONY: $(BIN)

install: $(BIN)
	mkdir -p "$(DESTDIR)"
	install "$(BIN)" "$(DESTDIR)"
.PHONY: install
