#!/usr/bin/env bash

# Checks if local branches have been merged, rebased, squash-merged, or cherry-picked
# onto/into another branch (default main).
#
# TODO:
#
#   - Mark branches which appear to be squashed or rebased but which are not pushed
#     to upstream separately. These branches fail to be deleted with '-d' because Git
#     can tell there's no other copy, since it's not pushed nor actually merged with
#     the target branch. These branches should not be marked for deletion when using
#     the -d flag of this command.
#
#   - See if we can avoid copying the whole worktree when making the temp copy.
#     Maybe just the .git dir would be enough to do these checks, and this should
#     make things faster and maybe more stable.
#     - In my home directory the current implementation doesn't work because there
#       are so many files there that aren't tracked by git.
#   
set -euo pipefail
VERBOSE="${VERBOSE:-1}"
DEBUG="${DEBUG:-0}"

verbose() { enabled VERBOSE || debugging; }
_log() { if terminal; then echo "$*" 1>&2; fi; }
_print() { echo -n "$*" 1>&2; }
# terminal returns true if we're attached to a terminal.
terminal() { [[ -t 1 ]]; }
log() { verbose && _log "$*"; }
# log_output writes one line. The first arg is on stderr, the remaining on stdout.
log_output() { if terminal; then _print "$1"; fi; shift; echo "$*"; }
die() { _log "FATAL: $*"; exit 1; }
debugging() { enabled DEBUG; }
debug() { if debugging; then _log "DEBUG: $*"; fi; }
enabled() { [[ "${!1:-,,}" =~ 1|true|y|yes ]]; }
run() {
	debug "Running $*"
	if ! "$@"; then
		_log "Command failed: $*"
	fi
}

DELETE=false

while getopts ":d" opt; do
  case $opt in
    d)
	  DELETE=true
	  shift
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"

is_in_array() { local WHAT="$1"; shift
	for E; do [[ "$E" == "$WHAT" ]] && return 0; done
	return 1
}

# Use DOT_GIT_DIR to avoid confusing git by setting GIT_DIR...
DOT_GIT_DIR="${GIT_DIR:-}"

[[ -n "$DOT_GIT_DIR" ]] || {
	DOT_GIT_DIR="$(git rev-parse --absolute-git-dir)" || die "Not in a Git repo."
}

print_branch_if_exists() { local NAME="$1"
	[[ -f "$DOT_GIT_DIR/refs/heads/$NAME" ]] || return 1
	echo "$NAME"
}

remote_default_branch() { local REMOTE_NAME="$1"
	[[ -z "$REMOTE_NAME" ]] && return 0
	git remote show "$REMOTE_NAME" | grep 'HEAD branch' | cut -d':' -f2 | xargs	
}

print_remote_if_exists() { NAME="$1"
	git remote | grep -E "^$NAME\$" || return 1
}

# Try to figure out the default remote.
default_remote() { local REMOTES COUNT
	read -ra REMOTES < <(git remote) || return 0
	COUNT=${#REMOTES}
	[[ $COUNT -eq 1 ]] && { echo "${REMOTES[0]}"; return; }
	# Look for the commonest remote name...
	print_remote_if_exists origin && return
	[[ $COUNT -eq 0 ]] && return
	# Just pick the first remote in the list... YOLO
	echo "${REMOTES[0]}"
}

default_target_branch() {
	# Look for some common default branch names...
	print_branch_if_exists main   && return
	print_branch_if_exists master && return
	# Query deafult remote
	remote_default_branch "$(default_remote)"
}

TARGET_BRANCH="${1:-$(default_target_branch)}"

# MERGED_LIST contains branches that have actually been merged.
MERGED_LIST="$(git branch --merged "$TARGET_BRANCH" --format='%(refname:lstrip=2)' | grep -Ev "^$TARGET_BRANCH\$" || true)"

readarray -t MERGED <<< "$MERGED_LIST"

export MERGED

REPO_ROOT="$(git rev-parse --show-toplevel)"

WORKDIR="$TMPDIR/git-merged/$(basename "$REPO_ROOT")"

debug "Working in $WORKDIR"

run rm -rf "$WORKDIR"
run mkdir -p "$WORKDIR"
run cp -R "$REPO_ROOT/." "$WORKDIR"

#trap EXIT rm -rf "$WORKDIR"

run cd "$WORKDIR" || die "Couldn't cd to $WORKDIR"

BRANCHES="$(find "$DOT_GIT_DIR/refs/heads" -mindepth 1 -type f | sed -E "s|^$DOT_GIT_DIR/refs/heads/(.*)\$|\1|")"

is_rebased() { local BRANCH="$1" BASE="$2" LOG
	LOG="$(git log --cherry --pretty=oneline "$BASE...$BRANCH")" || die "Unable to run git log --cherry --pretty=oneline ..."
	# Search the log for lines not beginning with "="... If there are none
	# then all commits on this branch are on the base branch so return 0.
	! grep -Ev '^=' <<< "$LOG" > /dev/null 2>&1
}

is_squashed() { local BRANCH="$1" BASE="$2"
	run git reset -q --hard HEAD --
	run git checkout -qB "git-merged/test/$BRANCH" "$BASE" --
	run git reset -q --hard "$BASE" --
	run git merge -q -m "git-merged: test: $BRANCH -> $BASE" "$BRANCH" > /dev/null 2>&1 || return 1
	DIFF_CHAR_COUNT="$(run git diff HEAD "$BASE" -- | wc -c | xargs)"
	[[ "$DIFF_CHAR_COUNT" -eq 0 ]]
}

TO_DELETE=()
mark_for_deletion() { local BRANCH="$1"
	$DELETE || return 0
	TO_DELETE+=("$BRANCH")
}
SUFFIX=""
for BRANCH in $BRANCHES; do
	if [[ "$BRANCH" == "$CURRENT_BRANCH" ]]; then
		SUFFIX=" *"
	else
		SUFFIX=""
	fi
	# Never check main against itself...
	if [[ "$BRANCH" == "$TARGET_BRANCH" ]]; then continue; fi
	if is_in_array "$BRANCH" "${MERGED[@]}" "$TARGET_BRANCH"; then
		debug "Skipping squash-merge check of actually-merged branch $BRANCH"
		log_output "" "m $BRANCH$SUFFIX"
		mark_for_deletion "$BRANCH"
		continue
	fi
	if is_rebased "$BRANCH" "$TARGET_BRANCH"; then
		log_output "" "r $BRANCH$SUFFIX"
		mark_for_deletion "$BRANCH"
		continue
	fi
	if is_squashed "$BRANCH" "$TARGET_BRANCH"; then
		log_output "" "s $BRANCH$SUFFIX"
		mark_for_deletion "$BRANCH"
		continue
	fi
	#log_output "" "u $BRANCH $(git rev-list --left-right --count $TARGET_BRANCH...$BRANCH | sed -E -e 's/^/-/' -e 's/[[:space:]]+/ \+/')"
	log_output "" "u $BRANCH"
done

$DELETE || exit 0 

COUNT=${#TO_DELETE[@]}
if [[ $COUNT == 0 ]]; then 
	log "==> No merged branches to delete."
	exit 1
fi

echo "==> Do you want to delete these branches? (Y/n):"
for B in "${TO_DELETE[@]}"; do
	echo "$B"
done

FAILED=false

read -r ANSWER
{ [[ -z "$ANSWER" ]] || [[ "$ANSWER" == "y" ]]; } && {
	log "==> Deleting..."
	cd "$REPO_ROOT" || exit 1
	for B in "${TO_DELETE[@]}"; do
		if [[ "$B" == "$CURRENT_BRANCH" ]]; then
			log "Skipping delete of current branch."
			continue
		fi
		git branch --quiet --delete "$B" || { FAILED=true; }
	done
}
if $FAILED; then
	die "Failed to delete some branches."
fi
