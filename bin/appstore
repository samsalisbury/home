#!/usr/bin/env bash

set -Eeuo pipefail

_log() { echo "$*" 1>&2; }

debug() { $DEBUG || return 0; _log "--> DEBUG: %*"; }
log()   { ($VERBOSE || $DEBUG) || return 0; $QUIET && return 0; _log "--> $*"; }
info()  { $QUIET && return 0; _log "--> $*"; }
err()   { _log "--> ERROR: $*"; return 1; }
die()   { _log "--> FATAL: $*"; exit 1; }

trap 'main "$@"' EXIT

THIS_SCRIPT="$0"
ITUNES_API="https://itunes.apple.com"
CACHE_ROOT="$TMPDIR/home/bin/app-store-query"

# Flag options.
JSON=false
PLIST=false
RAW=false
QUIET=false
VERBOSE=false
DEBUG=false
REFRESH=false

MAX_AGE_MINUTES=20
MAX_AGE_SECONDS=$(( 60 * MAX_AGE_MINUTES ))


# If util-linux is installed via homebrew, then use that column command.
COLUMN="$(brew list util-linux | grep -F 'bin/column' 2> /dev/null)" || {
	COLUMN="$(which column)"
}

# Test column command...
$COLUMN --table -T1 <<< "" > /dev/null 2>&1 || {
	die "Column command from util-linux required; try 'brew install util-linux'"
}

# Wrap call to column in a function to make it seamless below.
column() { $COLUMN "$@"; }

main() {
	[[ $# -gt 1 ]] || die_usage
	run_subcommand_and_exit "$@"
	die "$(usage)"
}

usage() {
	echo "Search the uk app store"
	echo "Usage:"
	echo "  $(basename "$THIS_SCRIPT") search <term>"
}

die_usage() { _log "$(usage)"; exit 1; }

run_subcommand_and_exit() { local NAME="$1"; shift
	local ARGS=()
	while [[ $# -gt 0 ]]; do
		case "$1" in
			-j|--json)
				JSON=true; shift
				;;
			-p|--plist)
				PLIST=true; shift
				;;
			-r|--raw)
				RAW=true; shift
				;;
			-d|--debug)
				DEBUG=true; shift
				;;
			-R|--refresh)
				REFRESH=true; shift
				;;
			-q|--quiet)
				QUIET=true; shift
				;;
			-v|--verbose)
				VERBOSE=true; shift
				;;
			*)
				ARGS+=("$1"); shift
				;;
		esac
	done
	set -- "${ARGS[@]}"
	$JSON && $PLIST && die "You can only specify json or plist, not both."
	func_exists "cmd_$NAME" || die "No subcommand named '$NAME'"
	"cmd_$NAME" "$@"; exit $?
}


#
# Search command
#

cmd_search() { local TERM="$1" URL=""
	URL="$(search_url "$TERM")"
	get "$URL" present_searchresults
}

search_url() { local TERM="$1" COUNTRY="gb" MEDIA="software" ENTITY="software" QUERY=""
	QUERY="$(printf "term=%s&country=%s&&media=%s&entity=%s" \
		"$TERM" \
		"$COUNTRY" \
		"$MEDIA" \
		"$ENTITY" \
	)"
	echo "${ITUNES_API}/search?${QUERY}"
}

present_searchresults() {
	$RAW   && { echo "$1"; return; }
	$JSON  && { jq . <<< "$1"; return; }
	$PLIST && { plutil -convert xml1 - -o - <<< "$1"; return; }
	{
		echo $'App ID\tName\tDeveloper\tWebsite'
		echo $'------\t----\t---------\t-------'
		echo "$1" | jq -r \
		'.results[] | "\(.trackId)\t\(.trackName)\t\(.artistName)\t\(.sellerUrl // "-")"'
	} |	column -t -T2,3,4 -s$'\t'
}


#
# Details command
#

cmd_details() { local ID="$1" URL
	debug "ID=$ID"
	[[ "$ID" =~ [0-9]+ ]] || ID="$(id_of_first_result "$ID")"
	URL="$(details_url "$ID")"

	get "$URL" present_details
}

details_url() { local ID="$1" QUERY
	QUERY="$(printf "id=%s" "$ID")"
	echo "${ITUNES_API}/lookup?${QUERY}"
}

present_details() {
	$RAW   && { echo "$1"; return; }
	$JSON  && { jq . <<< "$1"; return; }
	$PLIST && { plutil -convert xml1 - -o - <<< "$1"; return; }
	echo "$1" | jq -r '.results[0] | "Name:\t\(.trackName)\nSeller:\t\(.sellerName)\nVersion:\t\(.version)\nLast Release Date:\t\(.currentVersionReleaseDate)\nBundle ID:\t\(.bundleId)\nID:\t\(.trackId)"' | column -t -s$'\t'
}


#
#
# Internals
#
#

id_of_first_result() { local TERM="$1" ID
	ID="$( export RAW=true; cmd_search "$TERM" | jq -r '.results[].trackId' | head -n1; )" || die "Couldn't find ID for '$TERM'"
	log "$TERM -> $ID"
	echo "$ID"
}


get() { local URL="$1" PRESENTER="$2" RESULT="" STATUS="OK" FROM=""
	log "GET $URL"
	export RESULT STATUS
	trap '$PRESENTER "$RESULT"; log "$STATUS: Loaded from $FROM" && trap - RETURN' RETURN
	FROM=cache
	RESULT="$(load_from_cache "$URL")" && return 0 
	FROM=web
	RESULT="$(req "$URL")" || { STATUS="Failed"; return 1; }
	save_to_cache "$URL" "$RESULT"
}

save_to_cache() { local URL="$1" RESULT="$2"
	CACHE="$(url_cache_path "$URL")"
	echo "$RESULT" > "$CACHE" && return 0
	log "Failed to cache result."
	return 1
}

load_from_cache() { local URL="$1" AGE_SECONDS
	$REFRESH && {
		log "Skipping cache check - refresh requested."
		return 1
	}
	CACHE="$(url_cache_path "$URL")"
	[[ ! -f "$CACHE" ]] && return 1
	AGE_SECONDS="$(($(date +%s) - $(date -r "$CACHE" +%s)))"
	[[ "$AGE_SECONDS" -gt "$MAX_AGE_SECONDS" ]] && {
		log "Cache expired: $CACHE"
		return 1
	}
	cat "$CACHE" && { log "Loaded from cache (${AGE_SECONDS}s old): $CACHE"; return 0; }
	return 1
}

url_cache_path() { local URL="$1" CACHE_PATH=""
	CACHE_PATH="$CACHE_ROOT/$(digest "$URL")"
	mkdir -p "$(dirname "$CACHE_PATH")"
	echo "$CACHE_PATH"
}

digest() { local STRING="$1"
	sha256sum <<< "$STRING" | cut -d' ' -f1
}

func_exists() { local NAME="$1"; [[ $(type -t "$NAME") == function ]]; }

req() { local URL="$1" CURL_FLAGS=(-f --silent --show-error --location)
	$DEBUG || CURL_FLAGS+=()
	$DEBUG && CURL_FLAGS+=(-D /dev/stderr)
	curl "${CURL_FLAGS[@]}" "$URL"
}
