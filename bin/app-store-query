#!/usr/bin/env bash

set -Eeuo pipefail

log() { $QUIET && return 0; echo "$*" 1>&2; }
die() { QUIET=false log "FATAL: $*"; exit 1; }

trap 'main "$@"' EXIT

THIS_SCRIPT="$0"
ITUNES_API="https://itunes.apple.com/search"
CACHE_ROOT="$TMPDIR/home/bin/app-store-query"

# Flag options.
JSON=false
PLIST=false
RAW=false
QUIET=false

MAX_AGE_MINUTES=20
MAX_AGE_SECONDS=$(( 60 * MAX_AGE_MINUTES ))

main() {
	run_subcommand_and_exit "$@"
	die "$(usage)"
}

run_subcommand_and_exit() { local NAME="$1"; shift
	local ARGS=()
	while [[ $# -gt 0 ]]; do
		case "$1" in
			-j|--json)
				JSON=true; shift
				;;
			-p|--plist)
				PLIST=true; shift
				;;
			-r|--raw)
				RAW=true; shift
				;;
			-q|--quiet)
				QUIET=true; shift
				;;
			*)
				ARGS+=("$1"); shift
				;;
		esac
	done
	set -- "${ARGS[@]}"
	$JSON && $PLIST && die "You can only specify json or plist, not both."
	func_exists "cmd_$NAME" || die "No subcommand named '$NAME'"
	"cmd_$NAME" "$@"; exit $?
}

cmd_search() { local TERM="$1" URL=""
	URL="$(search_url "$TERM")"
	get "$URL"
}

get() { local URL="$1" RESULT="" STATUS="OK" FROM=""
	log "GET $URL"
	export RESULT STATUS
	trap 'present "$RESULT"; log "$STATUS: Loaded from $FROM" && trap - RETURN' RETURN
	FROM=cache
	RESULT="$(load_from_cache "$URL")" && return 0 
	FROM=web
	RESULT="$(curl -f --silent --show-error "$URL")" || { STATUS="Failed"; return 1; }
	save_to_cache "$URL" "$RESULT"
}

present() {
	$RAW   && { echo "$1"; return; }
	$JSON  && { jq . <<< "$1"; return; }
	$PLIST && { plutil -convert xml1 - -o - <<< "$1"; return; }
	{
		echo $'App ID\tName\tDeveloper\tWebsite'
		echo $'------\t----\t---------\t-------'
		echo "$1" | jq -r \
		'.results[] | "\(.trackId)\t\(.trackName)\t\(.artistName)\t\(.sellerUrl // "-")"'
	} |	column -t -s$'\t'
}

save_to_cache() { local URL="$1" RESULT="$2"
	CACHE="$(url_cache_path "$URL")"
	echo "$RESULT" > "$CACHE" && return 0
	log "Failed to cache result."
	return 1
}

load_from_cache() { local URL="$1" AGE_SECONDS
	CACHE="$(url_cache_path "$URL")"
	[[ ! -f "$CACHE" ]] && return 1
	AGE_SECONDS="$(($(date +%s) - $(date -r "$CACHE" +%s)))"
	[[ "$AGE_SECONDS" -gt "$MAX_AGE_SECONDS" ]] && {
		log "Cache expired: $CACHE"
		return 1
	}
	cat "$CACHE" && { log "Loaded from cache: $CACHE"; return 0; }
	return 1
}

url_cache_path() { local URL="$1" CACHE_PATH=""
	CACHE_PATH="$CACHE_ROOT/$(digest "$URL")"
	mkdir -p "$(dirname "$CACHE_PATH")"
	echo "$CACHE_PATH"
}

digest() { local STRING="$1"
	sha256sum <<< "$STRING" | cut -d' ' -f1
}

func_exists() { local NAME="$1"; [[ $(type -t "$NAME") == function ]]; }

usage() {
	echo "Search the uk app store: $THIS_SCRIPT search <term>"
}

search_url() { local TERM="$1" COUNTRY="gb" MEDIA="software" ENTITY="software" QUERY=""
	QUERY="$(printf "term=%s&country=%s&&media=%s&entity=%s" \
		"$TERM" \
		"$COUNTRY" \
		"$MEDIA" \
		"$ENTITY" \
	)"
	echo "${ITUNES_API}?${QUERY}"
}
