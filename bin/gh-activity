#!/usr/bin/env bash

set -Eeuo pipefail
# shellcheck disable=SC2059
log() { local F="$1"; shift; printf "$F\n" "$@"; }
die() { local F="FATAL: $1"; shift; log "$F" "$@"; exit 1; }
err() { local F="ERROR: $1"; shift; log	"$F" "$@"; return 1; }
# Set exit trap if this file was directly invoked rather than sourced.
# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
(return 0 2>/dev/null) || trap 'gh-activity.main "$@"' EXIT
gh-activity.main() {
	local CODE=$?; trap - EXIT
	[[ $CODE == 0 ]] || die "Script exited with code $CODE before main func could run."
	[[ ${#@} != 0 ]] || { log "No arguments passed."; exit; }; local FUNC="$1"; shift
	declare -F | cut -d' ' -f3 | grep -qE "^$FUNC\$" || die "Function '%s' not defined." "$FUNC"
	"$FUNC" "$@"
}

GDATE_FORMAT="+%Y-%m-%d"
GO_DATE_FORMAT="2006-01-02"

date_string() { local DATE="$1"; gdate -d "$DATE" "$GDATE_FORMAT"; }

prs_md_template() { local DATE="${1:-$DEFAULT_DATE}"
	DATE_STR="$(date_string "$DATE")"
	echo '
		{{- range . -}}
			{{- if and (eq .type "PullRequestEvent") (eq (timefmt "'"$GO_DATE_FORMAT"'" .created_at) "'"$DATE_STR"'") -}}
				- {{- if and (eq .payload.action "closed") .payload.pull_request.merged }} merged {{else}} {{.payload.action}} {{end}}
				{{- printf "[**%s** #%.f](%s) (%s)\n"
					.payload.pull_request.title
					.payload.pull_request.number
					.payload.pull_request.html_url
					.repo.name
				}}
			{{- end -}}
		{{- end -}}
	'
}

prs_jq_query() { local DATE="${1:-$DEFAULT_DATE}"
	DATE_STR="$(date_string "$DATE")"
	echo '
		.[] 
		| select(.type == "PullRequestEvent" and strftime(.created_at, "%Y-%m-%d") == '"$DATE_STR"')
		| {
			type: .type,
			repo: .repo.name,
			created_at: .created_at,
			public: .public,
			action:          .payload.action,
			title:           .payload.pull_request.title,
			number:          .payload.pull_request.number,
			merged:          .payload.pull_request.merged,
			comments:        .payload.pull_request.comments,
			review_comments: .payload.pull_request.review_comments,
			commits:         .payload.pull_request.commits,
			additions:       .payload.pull_request.additions,
			deletions:       .payload.pull_request.deletions,
			changed_files:   .payload.pull_request.changed_files
		}
	'
}

DEFAULT_DATE=yesterday

prs/query() {
	gh api /users/samsalisbury/events?per_page=100 "$@"
}

prs/json() { local DATE="${1:-$DEFAULT_DATE}"
	prs/query --jq "$(prs_jq_query "$DATE")"
}

prs/json/view() { local DATE="${1:-$DEFAULT_DATE}"
	prs/json "$DATE" | view-json
}

prs/md() { local DATE="${1:-$DEFAULT_DATE}"
	prs/query --template "$(prs_md_template "$DATE")" | tac
}
